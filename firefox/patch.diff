# HG changeset patch
# Parent b73f51e6746f0c96975f5f63ec8c38124a34dd2a
# User Karl Tomlinson <karlt+@karlt.net>
b=833117 replace deprecated and ineffective g_slice_set_config with G_SLICE env var r?glandium

diff --git a/browser/app/nsBrowserApp.cpp b/browser/app/nsBrowserApp.cpp
--- a/browser/app/nsBrowserApp.cpp
+++ b/browser/app/nsBrowserApp.cpp
@@ -53,16 +53,28 @@ using namespace mozilla;
 #define kDesktopFolder "browser"
 #define kMetroFolder "metro"
 #define kMetroAppIniFilename "metroapp.ini"
 #ifdef XP_WIN
 #define kMetroTestFile "tests.ini"
 const char* kMetroConsoleIdParam = "testconsoleid=";
 #endif
 
+#if defined(MOZ_WIDGET_GTK) \
+  && (defined(MOZ_MEMORY) || defined(__FreeBSD__) \
+      || (defined(__NetBSD__) && __NetBSD_Version__ >= 500000000))
+  // Disable the slice allocator, since jemalloc already uses similar layout
+  // algorithms, and using a sub-allocator tends to increase fragmentation.
+  // This must be done before any g_slice_* functions are called.  That is
+  // before g_thread_init() for GLib versions prior to 2.32, before
+  // g_type_init() for later versions prior to 2.36, and before the library is
+  // loaded for later versions.
+#define SET_G_SLICE_ALWAYS_MALLOC 1
+#endif
+
 static void Output(const char *fmt, ... )
 {
   va_list ap;
   va_start(ap, fmt);
 
 #ifndef XP_WIN
   vfprintf(stderr, fmt, ap);
 #else
@@ -154,25 +166,33 @@ static void AttachToTestHarness()
 
 XRE_GetFileFromPathType XRE_GetFileFromPath;
 XRE_CreateAppDataType XRE_CreateAppData;
 XRE_FreeAppDataType XRE_FreeAppData;
 XRE_TelemetryAccumulateType XRE_TelemetryAccumulate;
 XRE_StartupTimelineRecordType XRE_StartupTimelineRecord;
 XRE_mainType XRE_main;
 XRE_StopLateWriteChecksType XRE_StopLateWriteChecks;
+#if SET_G_SLICE_ALWAYS_MALLOC
+void (*g_thread_init)(void*);
+void (*g_type_init)();
+#endif
 
 static const nsDynamicFunctionLoad kXULFuncs[] = {
     { "XRE_GetFileFromPath", (NSFuncPtr*) &XRE_GetFileFromPath },
     { "XRE_CreateAppData", (NSFuncPtr*) &XRE_CreateAppData },
     { "XRE_FreeAppData", (NSFuncPtr*) &XRE_FreeAppData },
     { "XRE_TelemetryAccumulate", (NSFuncPtr*) &XRE_TelemetryAccumulate },
     { "XRE_StartupTimelineRecord", (NSFuncPtr*) &XRE_StartupTimelineRecord },
     { "XRE_main", (NSFuncPtr*) &XRE_main },
     { "XRE_StopLateWriteChecks", (NSFuncPtr*) &XRE_StopLateWriteChecks },
+#if SET_G_SLICE_ALWAYS_MALLOC
+    { "g_thread_init", (NSFuncPtr*) &g_thread_init },
+    { "g_type_init", (NSFuncPtr*) &g_type_init },
+#endif
     { nullptr, nullptr }
 };
 
 static int do_main(int argc, char* argv[], nsIFile *xreDirectory)
 {
   nsCOMPtr<nsIFile> appini;
   nsresult rv;
   uint32_t mainFlags = 0;
@@ -545,31 +565,49 @@ InitXPCOMGlue(const char *argv0, nsIFile
     }
   }
   if (!greFound) {
 #endif
     Output("Could not find the Mozilla runtime.\n");
     return NS_ERROR_FAILURE;
   }
 
+#if SET_G_SLICE_ALWAYS_MALLOC
+  char *g_slice = getenv("G_SLICE");
+  static char tmp_g_slice[] = "G_SLICE=always-malloc";
+  if (!g_slice) {
+    putenv(tmp_g_slice);
+  }
+#endif
+
   // We do this because of data in bug 771745
   XPCOMGlueEnablePreload();
 
   rv = XPCOMGlueStartup(exePath);
   if (NS_FAILED(rv)) {
     Output("Couldn't load XPCOM.\n");
     return rv;
   }
 
   rv = XPCOMGlueLoadXULFunctions(kXULFuncs);
   if (NS_FAILED(rv)) {
     Output("Couldn't load XRE functions.\n");
     return rv;
   }
 
+#if SET_G_SLICE_ALWAYS_MALLOC
+  if (!g_slice) {
+    // Restore the environment for child processes after ensuring that GLib
+    // has read the variable.
+    g_thread_init(nullptr); // For GLib version < 2.32
+    g_type_init(); // For 2.32 <= GLib version < 2.36
+    unsetenv("G_SLICE");
+  }
+#endif
+
   NS_LogInit();
 
   // chop XPCOM_DLL off exePath
   *lastSlash = '\0';
 #ifdef XP_WIN
   rv = NS_NewLocalFile(NS_ConvertUTF8toUTF16(exePath), false,
                        xreDirectory);
 #else
diff --git a/toolkit/xre/nsAppRunner.cpp b/toolkit/xre/nsAppRunner.cpp
--- a/toolkit/xre/nsAppRunner.cpp
+++ b/toolkit/xre/nsAppRunner.cpp
@@ -4057,23 +4057,16 @@ XREMain::XRE_main(int argc, char* argv[]
   if (!mAppData)
     return 1;
   // used throughout this file
   gAppData = mAppData;
 
   ScopedLogging log;
 
 #if defined(MOZ_WIDGET_GTK)
-#if defined(MOZ_MEMORY) || defined(__FreeBSD__) \
-  || defined(__NetBSD__) && __NetBSD_Version__ >= 500000000
-  // Disable the slice allocator, since jemalloc already uses similar layout
-  // algorithms, and using a sub-allocator tends to increase fragmentation.
-  // This must be done before g_thread_init() is called.
-  g_slice_set_config(G_SLICE_CONFIG_ALWAYS_MALLOC, 1);
-#endif
   g_thread_init(nullptr);
 #endif
 
   // init
   bool exit = false;
   int result = XRE_mainInit(&exit);
   if (result != 0 || exit)
     return result;
